/**
 * Inference code generated from the JSON schema spec in ./spec
 *
 * Using src/scripts/inference-codegen
 */

/**
 * Inputs for ChatCompletion inference
 */
export interface ChatCompletionInput {
	/**
	 * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing
	 * frequency in the text so far, decreasing the model's likelihood to repeat the same line
	 * verbatim.
	 */
	frequency_penalty?: number;
	/**
	 * The maximum number of tokens that can be generated in the chat completion.
	 */
	max_tokens?: number;
	messages: ChatCompletionInputMessage[];
	/**
	 * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they
	 * appear in the text so far, increasing the model's likelihood to talk about new topics
	 */
	presence_penalty?: number;
	/**
	 * The random sampling seed.
	 */
	seed?: number;
	/**
	 * Stop generating tokens if a stop token is generated.
	 */
	stop?: ChatCompletionInputStopReason;
	/**
	 * If set, partial message deltas will be sent.
	 */
	stream?: boolean;
	/**
	 * The value used to modulate the logits distribution.
	 */
	temperature?: number;
	/**
	 * The tool to use for generation.
	 */
	tool_choice?: string;
	/**
	 * The tools to use for generation.
	 */
	tools?: ChatCompletionTool[];
	/**
	 * If set to < 1, only the smallest set of most probable tokens with probabilities that add
	 * up to `top_p` or higher are kept for generation.
	 */
	top_p?: number;
	[property: string]: unknown;
}

export interface ChatCompletionInputMessage {
	/**
	 * The content of the message.
	 */
	content: string;
	/**
	 * The name of the message. Provides the model information to differentiate between
	 * participants of the same role.
	 */
	name?: string;
	role: ChatCompletionMessageRole;
	[property: string]: unknown;
}

/**
 * The role of the message author.
 */
export type ChatCompletionMessageRole = "assistant" | "system" | "user";

/**
 * Stop generating tokens if a stop token is generated.
 */
export type ChatCompletionInputStopReason = string[] | string;

/**
 * The tool to use for generation.
 */
export type ChatCompletionTool = unknown[] | boolean | number | number | null | ChatCompletionToolObject | string;

export interface ChatCompletionToolObject {
	/**
	 * The function of the tool to use.
	 */
	function?: { [key: string]: unknown };
	/**
	 * The type of tool to use.
	 */
	type?: string;
	[property: string]: unknown;
}

/**
 * Outputs for Chat Completion inference
 */
export interface ChatCompletionOutput {
	/**
	 * A list of chat completion choices.
	 */
	choices: ChatCompletionOutputChoice[];
	/**
	 * The Unix timestamp (in seconds) of when the chat completion was created.
	 */
	created: number;
	system_fingerprint?: string;
	usage?: ChatCompletionUsage;
	[property: string]: unknown;
}

export interface ChatCompletionOutputChoice {
	/**
	 * The reason why the generation was stopped.
	 */
	finish_reason: ChatCompletionFinishReason;
	/**
	 * The index of the choice in the list of choices.
	 */
	index: number;
	message: ChatCompletionOutputMessage;
	[property: string]: unknown;
}

/**
 * The reason why the generation was stopped.
 *
 * The generated sequence reached the maximum allowed length
 *
 * The model generated an end-of-sentence (EOS) token
 *
 * One of the sequence in stop_sequences was generated
 */
export type ChatCompletionFinishReason = "length" | "eos_token" | "stop_sequence";

export interface ChatCompletionOutputMessage {
	content: string;
	name?: string;
	role: string;
	[property: string]: unknown;
}

export interface ChatCompletionUsage {
	completion_tokens: number;
	prompt_tokens: number;
	total_tokens: number;
	[property: string]: unknown;
}

/**
 * Chat Completion Stream Output
 */
export interface ChatCompletionStreamOutput {
	/**
	 * A list of chat completion choices.
	 */
	choices: ChatCompletionStreamOutputChoice[];
	/**
	 * The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has
	 * the same timestamp.
	 */
	created: number;
	[property: string]: unknown;
}

export interface ChatCompletionStreamOutputChoice {
	/**
	 * A chat completion delta generated by streamed model responses.
	 */
	delta: ChatCompletionStreamOutputDelta;
	/**
	 * The reason why the generation was stopped.
	 */
	finish_reason?: ChatCompletionFinishReason;
	/**
	 * The index of the choice in the list of choices.
	 */
	index: number;
	[property: string]: unknown;
}

/**
 * A chat completion delta generated by streamed model responses.
 */
export interface ChatCompletionStreamOutputDelta {
	/**
	 * The contents of the chunk message.
	 */
	content?: string;
	/**
	 * The role of the author of this message.
	 */
	role?: string;
	[property: string]: unknown;
}
